===========================
How to Utilize 0-add_integer.py
===========================

This module includes a function for adding integers called ``add_integer(a, b=98)``.

Usage
=====

``add_integer(...)``` computes the sum of its two parameters. For numerical values, this is equivalent to applying the ``+`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

::

    >>> add_integer(2, -3)
    -1

The function is also compatible with floating-point numbers.

::

    >>> add_integer(2.0, 3.0)
    5

Keep in mind that floating-point numbers are converted to integers before the addition takes place.

::

    >>> add_integer(2.9, 0.2)
    2

::

    >>> add_integer(-2.9, -0.2)
    -2

You can mix floating-point and non-floating-point values.

::

    >>> add_integer(2.3, -3)
    -1

The second parameter is optional; it defaults to 98.

::

    >>> add_integer(2)
    100

Non-Numeric Values
==================

``add_integer()`` requires that both inputs are either integers or floats. If any input is neither an integer nor a float, a TypeError will be raised:

::

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both inputs are non-integers and non-floats, a TypeError message will only appear for the first input.

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will not work if infinity is passed as an argument.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

The same applies to NaN values.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
